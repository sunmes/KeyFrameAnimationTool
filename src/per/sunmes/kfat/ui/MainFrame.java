/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package per.sunmes.kfat.ui;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import per.sunmes.cppe.io.PlistReader;
import per.sunmes.cppe.io.data.MPlist;
import per.sunmes.kfat.data.AnimationInfo;
import per.sunmes.kfat.data.AnimationProjectInfo;
import per.sunmes.kfat.data.FrameInfo;
import per.sunmes.kfat.sys.FileUtil;
import per.sunmes.kfat.sys.SysData;

/**
 *
 * @author Administrator
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        customInit();
    }

    private WorkPanel wp;

    private void customInit() {
        wp = new WorkPanel();
        GridLayout layout = new GridLayout(1, 1);
        mainPanel.setLayout(layout);
        mainPanel.add(wp);
        SysData.instance().wp = wp;
        wp.setBounds(0, 0, mainPanel.getWidth(), mainPanel.getHeight());
        SysData.instance().mf = this;

        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((dimension.width - getWidth()) / 2, (dimension.height - getHeight()) / 2);

        String oldPath = SysData.instance().getApplicationConfig().lastProjectPath;
        if (oldPath.length() > 1) {
            projectChooser.setCurrentDirectory(new File(oldPath));
        }
    }

    public void loadProject(String fileName) {

    }

    public void createNewProject() {
        //check save
        if (SysData.instance().getProject() != null) {
            int result = JOptionPane.showConfirmDialog(this, "当前已存在打开项目,是否保存当前项目?", "警告", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                //TODO save.
            }
        }
        CreateProjectFrame cpf = new CreateProjectFrame();
        cpf.setBlockFrame(this);
        this.setEnabled(false);
        cpf.setVisible(true);
    }

    public void updateProject() {
        wp.updateTreeList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageFileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        projectChooser = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        jButtonNew = new javax.swing.JButton();
        jButtonOpen = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jButtonLoad = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jButtonNewAnimation = new javax.swing.JButton();
        jButtonNewFrame = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        mainPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNew = new javax.swing.JMenuItem();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemSaveAs = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuProject = new javax.swing.JMenu();
        jMenuItemLoadResource = new javax.swing.JMenuItem();
        jMenuItemExport = new javax.swing.JMenuItem();

        imageFileChooser.setApproveButtonText("导入");
        imageFileChooser.setDialogTitle("导入资源");
        imageFileChooser.setFileFilter(new ImageResourceFileFilter());

        jScrollPane1.setViewportView(jEditorPane1);

        projectChooser.setCurrentDirectory(new java.io.File("H:\\Res"));
        projectChooser.setFileFilter(new ProjectFileFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KeyFrameAnimationTool");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setAlignmentX(0.0F);

        jButtonNew.setText("新建");
        jButtonNew.setFocusable(false);
        jButtonNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonNew);

        jButtonOpen.setText("打开");
        jButtonOpen.setFocusable(false);
        jButtonOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonOpen);

        jButtonSave.setText("保存");
        jButtonSave.setFocusable(false);
        jButtonSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonSave);
        jToolBar1.add(jSeparator3);

        jButtonLoad.setText("导入素材");
        jButtonLoad.setFocusable(false);
        jButtonLoad.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonLoad.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonLoad);
        jToolBar1.add(jSeparator4);

        jButtonNewAnimation.setText("新建动画");
        jButtonNewAnimation.setFocusable(false);
        jButtonNewAnimation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNewAnimation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNewAnimation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewAnimationActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonNewAnimation);

        jButtonNewFrame.setText("新建帧");
        jButtonNewFrame.setFocusable(false);
        jButtonNewFrame.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNewFrame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNewFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewFrameActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonNewFrame);
        jToolBar1.add(jSeparator5);

        mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mainPanel.setAlignmentX(0.0F);
        mainPanel.setAlignmentY(0.0F);
        mainPanel.setPreferredSize(new java.awt.Dimension(500, 524));
        mainPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                mainPanelComponentResized(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );

        jMenuFile.setText("文件");

        jMenuItemNew.setText("新建");
        jMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemNew);

        jMenuItemOpen.setText("打开");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpen);
        jMenuFile.add(jSeparator1);

        jMenuItemSave.setText("保存");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSave);

        jMenuItemSaveAs.setText("另存为");
        jMenuFile.add(jMenuItemSaveAs);
        jMenuFile.add(jSeparator2);

        jMenuItemExit.setText("退出");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar1.add(jMenuFile);

        jMenuEdit.setText("编辑");
        jMenuBar1.add(jMenuEdit);

        jMenuProject.setText("项目");

        jMenuItemLoadResource.setText("导入图片资源");
        jMenuItemLoadResource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadResourceActionPerformed(evt);
            }
        });
        jMenuProject.add(jMenuItemLoadResource);

        jMenuItemExport.setText("导出项目");
        jMenuItemExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExportActionPerformed(evt);
            }
        });
        jMenuProject.add(jMenuItemExport);

        jMenuBar1.add(jMenuProject);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewActionPerformed
        createNewProject();
    }//GEN-LAST:event_jMenuItemNewActionPerformed

    private void loadResource() {
        if (imageFileChooser.showOpenDialog(this) == JFileChooser.OPEN_DIALOG) {
            File file = imageFileChooser.getSelectedFile();
            AnimationProjectInfo project = SysData.instance().getProject();
            if (project != null) {
                if (SysData.instance().cachedImages.containsKey(file.getName())) {
                    JOptionPane.showMessageDialog(this, "该资源已存在!");
                    return;
                }
                if (!FileUtil.copyResourceFileToProjectDirectory(file)) {
                    JOptionPane.showMessageDialog(this, String.format("文件:\n[%s]\n拷贝到项目目录出错!", file.getAbsolutePath()));
                    return;
                }
                wp.addImageNode(file.getName());
                if (file.getName().endsWith("plist")) {
                    MPlist plist = PlistReader.readPlist(file);
                    if (plist == null) {
                        JOptionPane.showMessageDialog(this, "解析Plist文件出错!");
                        return;
                    }
                    String imgPath;
                    int p = file.getAbsolutePath().lastIndexOf("\\");
                    if (p < 0) {
                        p = file.getAbsolutePath().lastIndexOf("/");
                    }
                    if (p < 0) {
                        imgPath = plist.metadata.realTextureFileName;
                    } else {
                        imgPath = String.format("%s/%s", file.getAbsolutePath().subSequence(0, p), plist.metadata.realTextureFileName);

                    }
                    if (!FileUtil.copyResourceFileToProjectDirectory(new File(imgPath))) {
                        JOptionPane.showMessageDialog(this, "未找到Plist文件中指向的图片文件!");
                        return;
                    }
                    SysData.instance().addPlistImageResource(file.getName(), plist);
//                    SysData.instance().cachedPlists.put(file.getName(), plist);
//                    for (MPlist.Frame f : plist.frames) {
//                        String imageName = String.format("%s#%s", f.name, file.getName());
//                        project.imageNames.add(imageName);
//                        wp.addImageNode(imageName);
//                    }
                } else {
                    SysData.instance().addNewSrcImageResource(file);
                }
//                project.imageResources.add(file.getName());
            }
        }
    }

    private void jMenuItemLoadResourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadResourceActionPerformed
        loadResource();
    }//GEN-LAST:event_jMenuItemLoadResourceActionPerformed

    private void jMenuItemExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExportActionPerformed
        FileUtil.exportProject();
    }//GEN-LAST:event_jMenuItemExportActionPerformed

    private void mainPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mainPanelComponentResized
    }//GEN-LAST:event_mainPanelComponentResized

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        createNewProject();
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        loadResource();
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonNewAnimationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewAnimationActionPerformed
        SysData.instance().newAnimation();
    }//GEN-LAST:event_jButtonNewAnimationActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        wp.afterShow();
    }//GEN-LAST:event_formWindowOpened

    private void jButtonNewFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewFrameActionPerformed
        SysData.instance().newFrame();
    }//GEN-LAST:event_jButtonNewFrameActionPerformed

    public void openProject() {
        if (projectChooser.showOpenDialog(this) == JFileChooser.OPEN_DIALOG) {
            File file = projectChooser.getSelectedFile();

            ObjectInputStream bis = null;
            AnimationProjectInfo project = null;
            try {
                bis = new ObjectInputStream(new FileInputStream(file));
                project = (AnimationProjectInfo) bis.readObject();
            } catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "ReadError!.");
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (bis != null) {
                    try {
                        bis.close();
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if (project != null) {
                SysData.instance().setProject(project);
                wp.updateTreeList();
            } else {
                JOptionPane.showMessageDialog(this, "OpenError!.");
            }
        }
    }

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        openProject();
    }//GEN-LAST:event_jButtonOpenActionPerformed

    public void saveProject() {
        AnimationProjectInfo project = SysData.instance().getProject();
        if (project == null) {
            return;
        }
        ObjectOutputStream oos = null;
        try {
            oos = new ObjectOutputStream(new FileOutputStream(new File(project.projectDirectory + "/" + project.name + ".kfa")));
            oos.writeObject(project);

            //JOptionPane.showMessageDialog(this, "Save OK!");
        } catch (IOException e) {

        } finally {
            if (oos != null) {
                try {
                    oos.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        saveProject();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        openProject();
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        saveProject();
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (SysData.instance().getProject() != null) {
            if (JOptionPane.showConfirmDialog(this, "是否保存当前项目?", "提示", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                saveProject();
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        if (SysData.instance().getProject() != null) {
            if (JOptionPane.showConfirmDialog(this, "是否保存当前项目?", "提示", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                saveProject();
            }
        }
        dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser imageFileChooser;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonNewAnimation;
    private javax.swing.JButton jButtonNewFrame;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemExport;
    private javax.swing.JMenuItem jMenuItemLoadResource;
    private javax.swing.JMenuItem jMenuItemNew;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuItemSaveAs;
    private javax.swing.JMenu jMenuProject;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JFileChooser projectChooser;
    // End of variables declaration//GEN-END:variables
}
